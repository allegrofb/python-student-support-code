[  Assign([Name('tmpVar.0')], IfExp(Constant(True), Constant(2), Constant(10))),   Expr(Call(Name('print'), [Name('tmpVar.0')]))]
compiler if failed pass remove_complex_operands on test
D:\working\python-student-support-code/tests/if/if_explicate_control_1

{'conclusion': [  Return(Constant(0))], 'start': [  Assign([Name('tmpVar.0')], Constant(2)),   Expr(Call(Name('print'), [Name('tmpVar.0')])), Goto(label='conclusion')]}
compiler if failed pass explicate_control on test
D:\working\python-student-support-code/tests/if/if_explicate_control_1

  return 0

  tmpVar.0 = 2

  print(tmpVar.0)

  goto conclusion

compiler if failed pass select_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_1

compiler if failed pass assign_homes on test
D:\working\python-student-support-code/tests/if/if_explicate_control_1

compiler if failed pass patch_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_1

compiler if, executable failed on test D:\working\python-student-support-code/tests/if/if_explicate_control_1
[  Assign([Name('tmpVar.1')], IfExp(Compare(Constant(3), [Gt()], [Constant(1)]), Constant(2), Constant(10))),   Expr(Call(Name('print'), [Name('tmpVar.1')]))]
compiler if failed pass remove_complex_operands on test
D:\working\python-student-support-code/tests/if/if_explicate_control_2

{'conclusion': [  Return(Constant(0))], 'block.2': [  Expr(Call(Name('print'), [Name('tmpVar.1')])), Goto(label='conclusion')], 'block.3': [  Assign([Name('tmpVar.1')], Constant(2)), Goto(label='block.2')], 'block.4': [  Assign([Name('tmpVar.1')], Constant(10)), Goto(label='block.2')], 'start': [If(Compare(Constant(3), [Gt()], [Constant(1)]), [Goto(label='block.3')], [Goto(label='block.4')])]}
compiler if failed pass explicate_control on test
D:\working\python-student-support-code/tests/if/if_explicate_control_2

  return 0

  print(tmpVar.1)

  goto conclusion

  tmpVar.1 = 2

  goto block.2

  tmpVar.1 = 10

  goto block.2

  if 3 > 1:
    goto block.3
  else:
    goto block.4

compiler if failed pass select_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_2

compiler if failed pass assign_homes on test
D:\working\python-student-support-code/tests/if/if_explicate_control_2

compiler if failed pass patch_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_2

compiler if, executable failed on test D:\working\python-student-support-code/tests/if/if_explicate_control_2
[  Assign([Name('x')], Call(Name('input_int'), [])),   Assign([Name('y')], Call(Name('input_int'), [])),   Assign([Name('tmpVar.5')], IfExp(Compare(Name('x'), [Gt()], [Constant(1)]), Begin(body=[], result=BinOp(Name('y'), Add(), Constant(2))), Begin(body=[], result=BinOp(Name('y'), Add(), Constant(10))))),   Expr(Call(Name('print'), [Name('tmpVar.5')]))]
compiler if failed pass remove_complex_operands on test
D:\working\python-student-support-code/tests/if/if_explicate_control_3

{'conclusion': [  Return(Constant(0))], 'block.6': [  Expr(Call(Name('print'), [Name('tmpVar.5')])), Goto(label='conclusion')], 'block.7': [  Assign([Name('tmpVar.5')], BinOp(Name('y'), Add(), Constant(2))), Goto(label='block.6')], 'block.8': [  Assign([Name('tmpVar.5')], BinOp(Name('y'), Add(), Constant(10))), Goto(label='block.6')], 'start': [  Assign([Name('x')], Call(Name('input_int'), [])),   Assign([Name('y')], Call(Name('input_int'), [])), If(Compare(Name('x'), [Gt()], [Constant(1)]), [Goto(label='block.7')], [Goto(label='block.8')])]}
compiler if failed pass explicate_control on test
D:\working\python-student-support-code/tests/if/if_explicate_control_3

  return 0

  print(tmpVar.5)

  goto conclusion

  tmpVar.5 = (y + 2)

  goto block.6

  tmpVar.5 = (y + 10)

  goto block.6

  x = input_int()

  y = input_int()

  if x > 1:
    goto block.7
  else:
    goto block.8

compiler if failed pass select_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_3

compiler if failed pass assign_homes on test
D:\working\python-student-support-code/tests/if/if_explicate_control_3

compiler if failed pass patch_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_3

compiler if, executable failed on test D:\working\python-student-support-code/tests/if/if_explicate_control_3
[  Assign([Name('x')], Call(Name('input_int'), [])),   Assign([Name('y')], Call(Name('input_int'), [])),   Assign([Name('tmpVar.9')], IfExp(IfExp(Compare(Name('x'), [Lt()], [Constant(1)]), Compare(Name('x'), [Eq()], [Constant(0)]), Compare(Name('x'), [Eq()], [Constant(2)])), Begin(body=[], result=BinOp(Name('y'), Add(), Constant(2))), Begin(body=[], result=BinOp(Name('y'), Add(), Constant(10))))),   Expr(Call(Name('print'), [Name('tmpVar.9')]))]
compiler if failed pass remove_complex_operands on test
D:\working\python-student-support-code/tests/if/if_explicate_control_4

{'conclusion': [  Return(Constant(0))], 'block.10': [  Expr(Call(Name('print'), [Name('tmpVar.9')])), Goto(label='conclusion')], 'block.11': [  Assign([Name('tmpVar.9')], BinOp(Name('y'), Add(), Constant(2))), Goto(label='block.10')], 'block.12': [  Assign([Name('tmpVar.9')], BinOp(Name('y'), Add(), Constant(10))), Goto(label='block.10')], 'block.13': [If(Compare(Name('x'), [Eq()], [Constant(0)]), [Goto(label='block.11')], [Goto(label='block.12')])], 'block.14': [If(Compare(Name('x'), [Eq()], [Constant(2)]), [Goto(label='block.11')], [Goto(label='block.12')])], 'start': [  Assign([Name('x')], Call(Name('input_int'), [])),   Assign([Name('y')], Call(Name('input_int'), [])), If(Compare(Name('x'), [Lt()], [Constant(1)]), [Goto(label='block.13')], [Goto(label='block.14')])]}
compiler if failed pass explicate_control on test
D:\working\python-student-support-code/tests/if/if_explicate_control_4

  return 0

  print(tmpVar.9)

  goto conclusion

  tmpVar.9 = (y + 2)

  goto block.10

  tmpVar.9 = (y + 10)

  goto block.10

  if x == 0:
    goto block.11
  else:
    goto block.12

  if x == 2:
    goto block.11
  else:
    goto block.12

  x = input_int()

  y = input_int()

  if x < 1:
    goto block.13
  else:
    goto block.14

compiler if failed pass select_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_4

compiler if failed pass assign_homes on test
D:\working\python-student-support-code/tests/if/if_explicate_control_4

compiler if failed pass patch_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_4

compiler if, executable failed on test D:\working\python-student-support-code/tests/if/if_explicate_control_4
[  Assign([Name('x')], Call(Name('input_int'), [])),   Assign([Name('y')], Call(Name('input_int'), [])),   Assign([Name('tmpVar.16')], IfExp(IfExp(Compare(Name('x'), [Lt()], [Constant(1)]), Compare(Name('x'), [Eq()], [Constant(0)]), Compare(Name('x'), [Eq()], [Constant(2)])), Begin(body=[  Assign([Name('tmpVar.15')], Call(Name('input_int'), []))], result=BinOp(Name('tmpVar.15'), Add(), Constant(2))), Begin(body=[], result=BinOp(Name('y'), Add(), Constant(10))))),   Expr(Call(Name('print'), [Name('tmpVar.16')]))]
compiler if failed pass remove_complex_operands on test
D:\working\python-student-support-code/tests/if/if_explicate_control_5

{'conclusion': [  Return(Constant(0))], 'block.17': [  Expr(Call(Name('print'), [Name('tmpVar.16')])), Goto(label='conclusion')], 'block.18': [  Assign([Name('tmpVar.15')], Call(Name('input_int'), [])),   Assign([Name('tmpVar.16')], BinOp(Name('tmpVar.15'), Add(), Constant(2))), Goto(label='block.17')], 'block.19': [  Assign([Name('tmpVar.16')], BinOp(Name('y'), Add(), Constant(10))), Goto(label='block.17')], 'block.20': [If(Compare(Name('x'), [Eq()], [Constant(0)]), [Goto(label='block.18')], [Goto(label='block.19')])], 'block.21': [If(Compare(Name('x'), [Eq()], [Constant(2)]), [Goto(label='block.18')], [Goto(label='block.19')])], 'start': [  Assign([Name('x')], Call(Name('input_int'), [])),   Assign([Name('y')], Call(Name('input_int'), [])), If(Compare(Name('x'), [Lt()], [Constant(1)]), [Goto(label='block.20')], [Goto(label='block.21')])]}
compiler if failed pass explicate_control on test
D:\working\python-student-support-code/tests/if/if_explicate_control_5

  return 0

  print(tmpVar.16)

  goto conclusion

  tmpVar.15 = input_int()

  tmpVar.16 = (tmpVar.15 + 2)

  goto block.17

  tmpVar.16 = (y + 10)

  goto block.17

  if x == 0:
    goto block.18
  else:
    goto block.19

  if x == 2:
    goto block.18
  else:
    goto block.19

  x = input_int()

  y = input_int()

  if x < 1:
    goto block.20
  else:
    goto block.21

compiler if failed pass select_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_5

compiler if failed pass assign_homes on test
D:\working\python-student-support-code/tests/if/if_explicate_control_5

compiler if failed pass patch_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_5

compiler if, executable failed on test D:\working\python-student-support-code/tests/if/if_explicate_control_5
[  Assign([Name('tmpVar.22')], Call(Name('input_int'), [])),   Assign([Name('tmpVar.23')], Name('tmpVar.22')),   Assign([Name('tmpVar.24')], IfExp(Compare(Name('tmpVar.23'), [Eq()], [Constant(1)]), Constant(42), Constant(0))),   Expr(Call(Name('print'), [Name('tmpVar.24')]))]
compiler if failed pass remove_complex_operands on test
D:\working\python-student-support-code/tests/if/if_explicate_control_6

{'conclusion': [  Return(Constant(0))], 'block.25': [  Expr(Call(Name('print'), [Name('tmpVar.24')])), Goto(label='conclusion')], 'block.26': [  Assign([Name('tmpVar.24')], Constant(42)), Goto(label='block.25')], 'block.27': [  Assign([Name('tmpVar.24')], Constant(0)), Goto(label='block.25')], 'start': [  Assign([Name('tmpVar.22')], Call(Name('input_int'), [])),   Assign([Name('tmpVar.23')], Name('tmpVar.22')), If(Compare(Name('tmpVar.23'), [Eq()], [Constant(1)]), [Goto(label='block.26')], [Goto(label='block.27')])]}
compiler if failed pass explicate_control on test
D:\working\python-student-support-code/tests/if/if_explicate_control_6

  return 0

  print(tmpVar.24)

  goto conclusion

  tmpVar.24 = 42

  goto block.25

  tmpVar.24 = 0

  goto block.25

  tmpVar.22 = input_int()

  tmpVar.23 = tmpVar.22

  if tmpVar.23 == 1:
    goto block.26
  else:
    goto block.27

compiler if failed pass select_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_6

compiler if failed pass assign_homes on test
D:\working\python-student-support-code/tests/if/if_explicate_control_6

compiler if failed pass patch_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_6

compiler if, executable failed on test D:\working\python-student-support-code/tests/if/if_explicate_control_6
[  Assign([Name('tmpVar.28')], Call(Name('input_int'), [])),   Assign([Name('tmpVar.29')], Name('tmpVar.28')),   Assign([Name('tmpVar.30')], IfExp(Compare(Name('tmpVar.29'), [Eq()], [Constant(1)]), Constant(42), Constant(0))),   Expr(Call(Name('print'), [Name('tmpVar.30')]))]
compiler if failed pass remove_complex_operands on test
D:\working\python-student-support-code/tests/if/if_explicate_control_7

{'conclusion': [  Return(Constant(0))], 'block.31': [  Expr(Call(Name('print'), [Name('tmpVar.30')])), Goto(label='conclusion')], 'block.32': [  Assign([Name('tmpVar.30')], Constant(42)), Goto(label='block.31')], 'block.33': [  Assign([Name('tmpVar.30')], Constant(0)), Goto(label='block.31')], 'start': [  Assign([Name('tmpVar.28')], Call(Name('input_int'), [])),   Assign([Name('tmpVar.29')], Name('tmpVar.28')), If(Compare(Name('tmpVar.29'), [Eq()], [Constant(1)]), [Goto(label='block.32')], [Goto(label='block.33')])]}
compiler if failed pass explicate_control on test
D:\working\python-student-support-code/tests/if/if_explicate_control_7

  return 0

  print(tmpVar.30)

  goto conclusion

  tmpVar.30 = 42

  goto block.31

  tmpVar.30 = 0

  goto block.31

  tmpVar.28 = input_int()

  tmpVar.29 = tmpVar.28

  if tmpVar.29 == 1:
    goto block.32
  else:
    goto block.33

compiler if failed pass select_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_7

compiler if failed pass assign_homes on test
D:\working\python-student-support-code/tests/if/if_explicate_control_7

compiler if failed pass patch_instructions on test
D:\working\python-student-support-code/tests/if/if_explicate_control_7

compiler if, executable failed on test D:\working\python-student-support-code/tests/if/if_explicate_control_7
[  Assign([Name('t')], IfExp(Constant(True), Compare(Constant(1), [Gt()], [Constant(0)]), Constant(False))), If(Name('t'), [  Expr(Call(Name('print'), [Constant(1)]))], [  Expr(Call(Name('print'), [Constant(0)]))])]
compiler if failed pass remove_complex_operands on test
D:\working\python-student-support-code/tests/if/if_shrink_1

